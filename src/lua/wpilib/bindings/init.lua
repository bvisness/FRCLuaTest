-- Automatically generated by bindings.c. DO NOT EDIT.

local ffi = require("ffi")
ffi.cdef[[
void* Joystick_new(int port);
double Joystick_GetX(void* _this);
double Joystick_GetY(void* _this);
double Joystick_GetZ(void* _this);
double Joystick_GetTwist(void* _this);
double Joystick_GetThrottle(void* _this);
bool Joystick_GetTrigger(void* _this);
bool Joystick_GetTriggerPressed(void* _this);
bool Joystick_GetTriggerReleased(void* _this);
bool Joystick_GetTop(void* _this);
bool Joystick_GetTopPressed(void* _this);
bool Joystick_GetTopReleased(void* _this);
double Joystick_GetMagnitude(void* _this);
double Joystick_GetDirectionRadians(void* _this);
double Joystick_GetDirectionDegrees(void* _this);
bool Joystick_GetRawButton(void* _this, int button);
bool Joystick_GetRawButtonPressed(void* _this, int button);
bool Joystick_GetRawButtonReleased(void* _this, int button);
double Joystick_GetRawAxis(void* _this, int axis);
int Joystick_GetPOV(void* _this);
int Joystick_GetAxisCount(void* _this);
int Joystick_GetPOVCount(void* _this);
int Joystick_GetButtonCount(void* _this);
int Joystick_GetPort(void* _this);
void Joystick_SetRumble(void* _this, int type, double value);
void* TalonSRX_new(int deviceNumber);
void* TalonSRX_toSpeedController(void* _this);
void TalonSRX_SetWithTalonControlMode(void* _this, int mode, double value);
int TalonSRX_ConfigSelectedFeedbackSensor(void* _this, int feedbackDevice, int pidIdx, int timeoutMs);
int TalonSRX_ConfigPeakCurrentLimit(void* _this, int amps, int timeoutMs);
int TalonSRX_ConfigPeakCurrentDuration(void* _this, int milliseconds, int timeoutMs);
int TalonSRX_ConfigContinuousCurrentLimit(void* _this, int amps, int timeoutMs);
void TalonSRX_EnableCurrentLimit(void* _this, bool enable);
void TalonSRX_SetWithControlMode(void* _this, int mode, double value);
double TalonSRX_GetOutputCurrent(void* _this);
double TalonSRX_GetStatorCurrent(void* _this);
double TalonSRX_GetSupplyCurrent(void* _this);
int TalonSRX_ConfigVelocityMeasurementPeriod(void* _this, int period, int timeoutMs);
int TalonSRX_ConfigVelocityMeasurementWindow(void* _this, int windowSize, int timeoutMs);
int TalonSRX_ConfigForwardLimitSwitchSource(void* _this, int limitSwitchSource, int normalOpenOrClose, int timeoutMs);
int TalonSRX_ConfigReverseLimitSwitchSource(void* _this, int limitSwitchSource, int normalOpenOrClose, int timeoutMs);
int TalonSRX_IsFwdLimitSwitchClosed(void* _this);
int TalonSRX_IsRevLimitSwitchClosed(void* _this);
void TalonSRX_NeutralOutput(void* _this);
void TalonSRX_SetNeutralMode(void* _this, int neutralMode);
void TalonSRX_SetSensorPhase(void* _this, bool PhaseSensor);
void TalonSRX_SetInvertedBool(void* _this, bool invert);
void TalonSRX_SetInverted(void* _this, int invertType);
bool TalonSRX_GetInverted(void* _this);
int TalonSRX_ConfigFactoryDefault(void* _this, int timeoutMs);
int TalonSRX_ConfigOpenloopRamp(void* _this, double secondsFromNeutralToFull, int timeoutMs);
int TalonSRX_ConfigClosedloopRamp(void* _this, double secondsFromNeutralToFull, int timeoutMs);
int TalonSRX_ConfigPeakOutputForward(void* _this, double percentOut, int timeoutMs);
int TalonSRX_ConfigPeakOutputReverse(void* _this, double percentOut, int timeoutMs);
int TalonSRX_ConfigNominalOutputForward(void* _this, double percentOut, int timeoutMs);
int TalonSRX_ConfigNominalOutputReverse(void* _this, double percentOut, int timeoutMs);
int TalonSRX_ConfigNeutralDeadband(void* _this, double percentDeadband, int timeoutMs);
int TalonSRX_ConfigVoltageCompSaturation(void* _this, double voltage, int timeoutMs);
int TalonSRX_ConfigVoltageMeasurementFilter(void* _this, int filterWindowSamples, int timeoutMs);
void TalonSRX_EnableVoltageCompensation(void* _this, bool enable);
bool TalonSRX_IsVoltageCompensationEnabled(void* _this);
double TalonSRX_GetBusVoltage(void* _this);
double TalonSRX_GetMotorOutputPercent(void* _this);
double TalonSRX_GetMotorOutputVoltage(void* _this);
double TalonSRX_GetTemperature(void* _this);
int TalonSRX_ConfigSelectedFeedbackCoefficient(void* _this, double coefficient, int pidIdx, int timeoutMs);
int TalonSRX_ConfigSensorTerm(void* _this, int sensorTerm, int feedbackDevice);
double TalonSRX_GetSelectedSensorPosition(void* _this, int pidIdx);
double TalonSRX_GetSelectedSensorVelocity(void* _this, int pidIdx);
int TalonSRX_SetSelectedSensorPosition(void* _this, double sensorPos, int pidIdx, int timeoutMs);
int TalonSRX_SetControlFramePeriod(void* _this, int frame, int periodMs);
void TalonSRX_OverrideLimitSwitchesEnable(void* _this, bool enable);
int TalonSRX_ConfigForwardSoftLimitThreshold(void* _this, double forwardSensorLimit, int timeoutMs);
int TalonSRX_ConfigReverseSoftLimitThreshold(void* _this, double reverseSensorLimit, int timeoutMs);
void TalonSRX_OverrideSoftLimitsEnable(void* _this, bool enable);
int TalonSRX_Config_kP(void* _this, int slotIdx, double value, int timeoutMs);
int TalonSRX_Config_kI(void* _this, int slotIdx, double value, int timeoutMs);
int TalonSRX_Config_kD(void* _this, int slotIdx, double value, int timeoutMs);
int TalonSRX_Config_kF(void* _this, int slotIdx, double value, int timeoutMs);
int TalonSRX_Config_IntegralZone(void* _this, int slotIdx, double value, int timeoutMs);
int TalonSRX_ConfigAllowableClosedloopError(void* _this, int slotIdx, double allowableCloseLoopError, int timeoutMs);
int TalonSRX_ConfigMaxIntegralAccumulator(void* _this, int slotIdx, double iaccum, int timeoutMs);
int TalonSRX_ConfigClosedLoopPeakOutput(void* _this, int slotIdx, double percentOut, int timeoutMs);
int TalonSRX_ConfigClosedLoopPeriod(void* _this, int slotIdx, int loopTimeMs, int timeoutMs);
int TalonSRX_ConfigAuxPIDPolarity(void* _this, bool invert, int timeoutMs);
int TalonSRX_SetIntegralAccumulator(void* _this, double iaccum, int pidIdx, int timeoutMs);
double TalonSRX_GetClosedLoopError(void* _this, int pidIdx);
double TalonSRX_GetIntegralAccumulator(void* _this, int pidIdx);
double TalonSRX_GetErrorDerivative(void* _this, int pidIdx);
int TalonSRX_SelectProfileSlot(void* _this, int slotIdx, int pidIdx);
double TalonSRX_GetClosedLoopTarget(void* _this, int pidIdx);
double TalonSRX_GetActiveTrajectoryPosition(void* _this, int pidIdx);
double TalonSRX_GetActiveTrajectoryArbFeedFwd(void* _this, int pidIdx);
int TalonSRX_ConfigMotionCruiseVelocity(void* _this, double sensorUnitsPer100ms, int timeoutMs);
int TalonSRX_ConfigMotionAcceleration(void* _this, double sensorUnitsPer100msPerSec, int timeoutMs);
int TalonSRX_ConfigMotionSCurveStrength(void* _this, int curveStrength, int timeoutMs);
int TalonSRX_ClearMotionProfileTrajectories(void* _this);
int TalonSRX_GetMotionProfileTopLevelBufferCount(void* _this);
int TalonSRX_ConfigFeedbackNotContinuous(void* _this, bool feedbackNotContinuous, int timeoutMs);
int TalonSRX_ConfigClearPositionOnLimitF(void* _this, bool clearPositionOnLimitF, int timeoutMs);
int TalonSRX_ConfigClearPositionOnLimitR(void* _this, bool clearPositionOnLimitR, int timeoutMs);
int TalonSRX_ConfigClearPositionOnQuadIdx(void* _this, bool clearPositionOnQuadIdx, int timeoutMs);
int TalonSRX_ConfigLimitSwitchDisableNeutralOnLOS(void* _this, bool limitSwitchDisableNeutralOnLOS, int timeoutMs);
int TalonSRX_ConfigSoftLimitDisableNeutralOnLOS(void* _this, bool softLimitDisableNeutralOnLOS, int timeoutMs);
int TalonSRX_ConfigPulseWidthPeriod_EdgesPerRot(void* _this, int pulseWidthPeriod_EdgesPerRot, int timeoutMs);
int TalonSRX_ConfigPulseWidthPeriod_FilterWindowSz(void* _this, int pulseWidthPeriod_FilterWindowSz, int timeoutMs);
int TalonSRX_GetLastError(void* _this);
int TalonSRX_GetFirmwareVersion(void* _this);
bool TalonSRX_HasResetOccurred(void* _this);
int TalonSRX_GetBaseID(void* _this);
int TalonSRX_GetControlMode(void* _this);
void TalonSRX_Follow(void* _this, void* masterToFollow);
void TalonSRX_ValueUpdated(void* _this);
void* TalonFX_new(int deviceNumber);
void* TalonFX_toSpeedController(void* _this);
double TalonFX_Get(void* _this);
void TalonFX_Set(void* _this, double value);
void TalonFX_SetInverted(void* _this, int invertType);
void* DifferentialDrive_new(void* leftMotor, void* rightMotor);
void DifferentialDrive_ArcadeDrive(void* _this, double xSpeed, double zRotation, bool squareInputs);
void* Solenoid_new(int channel);
void Solenoid_Set(void* _this, bool on);
bool Solenoid_Get(void* _this);
void* DoubleSolenoid_new(int forwardChannel, int reverseChannel);
void* DoubleSolenoid_newWithModule(int moduleNumber, int forwardChannel, int reverseChannel);
void DoubleSolenoid_Set(void* _this, int value);
int DoubleSolenoid_Get(void* _this);
double GetFPGATimestamp();
]]
